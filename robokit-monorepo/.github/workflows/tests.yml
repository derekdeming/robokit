name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-api:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3
      with:
        version: "0.8.8"
    
    - name: Cache uv dependencies
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: |
          ~/.cache/uv
          api/.uv
        key: ${{ runner.os }}-uv-${{ hashFiles('api/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      working-directory: api
      run: uv sync --extra test
    
    - name: Set up test environment
      run: |
        cp .env.example .env
    
    - name: Start services with docker compose
      run: |
        docker compose up -d postgres
        # Wait for postgres to be ready
        timeout 60 bash -c 'until docker compose exec -T postgres pg_isready -U postgres -d robokit_test; do sleep 2; done'
    
    - name: Run API tests
      working-directory: api
      run: uv run pytest -v

    - name: Upload API test results
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: api-test-results
        path: api/.pytest_cache/
        retention-days: 7

  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    
    - name: Set up Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run type check
      working-directory: frontend
      run: npx tsc --noEmit
    
    - name: Run linting
      working-directory: frontend
      run: npm run lint
    
    - name: Set up environment variables
      working-directory: frontend
      run: |
        cp .env.example .env

    - name: Build application
      working-directory: frontend
      env:
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      run: npm run build 
  
  test-frontend-e2e:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    
    - name: Set up Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: '3.12'
    
    - name: Install uv
      uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3
      with:
        version: "0.8.8"
    
    - name: Cache uv dependencies
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: |
          ~/.cache/uv
          api/.uv
        key: ${{ runner.os }}-uv-${{ hashFiles('api/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
    
    - name: Set up frontend
      working-directory: frontend
      run: |
        npm ci
        cp .env.example .env
    
    - name: Set up DB
      run: |
        cp .env.example .env
        docker compose up -d postgres

        # Wait for postgres to be ready
        timeout 60 bash -c 'until docker compose exec -T postgres pg_isready -U postgres -d robokit_test; do sleep 2; done'

    - name: Set up API
      working-directory: api
      run: |
        uv sync --extra test

    - name: Install Playwright Browsers
      working-directory: frontend
      run: npm run test:install

    - name: Run Playwright tests
      env:
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ vars.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        E2E_CLERK_EMAIL: ${{ vars.E2E_CLERK_EMAIL }}
        E2E_CLERK_PASSWORD: ${{ secrets.E2E_CLERK_PASSWORD }}
      run: |
        # Start the API
        pushd api
        uv run python main.py &

        # wait for the API to be ready
        timeout 60 bash -c 'until curl -s http://localhost:8000/health; do sleep 2; done'
        popd

        cd frontend
        npm run test

    - name: Upload Playwright test results
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30
